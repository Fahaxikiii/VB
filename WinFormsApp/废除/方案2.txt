Imports Microsoft.VisualBasic.Logging
Imports System.IO
Imports System.Math
Imports System.Security.Cryptography
Imports System.Windows.Forms.VisualStyles.VisualStyleElement.ToolBar

Public Class count
    Private Sub LoginForm_FormClosing(sender As Object, e As FormClosingEventArgs) Handles MyBase.FormClosing
        ' 判断关闭原因是否为用户单击关闭按钮
        If e.CloseReason = CloseReason.UserClosing Then
            ' 如果是，退出整个应用程序
            Application.Exit()
        End If
    End Sub


    Private Sub txtStressRange_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtStressRange.KeyPress
        If e.KeyChar = ChrW(Keys.Return) Then ' 如果按下的是回车键
            e.Handled = True ' 防止出现“叮咚”声
            Me.SelectNextControl(txtStressRange, True, True, True, True) ' 跳转到下一个控件（即TextBox2）
        End If
    End Sub
    Private Sub txtMeanStress_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtMeanStress.KeyPress
        If e.KeyChar = ChrW(Keys.Return) Then ' 如果按下的是回车键
            e.Handled = True ' 防止出现“叮咚”声
            Me.SelectNextControl(txtMeanStress, True, True, True, True) ' 跳转到下一个控件（即TextBox2）
        End If
    End Sub
    Private Sub txtCyclesToFailure_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtCyclesToFailure.KeyPress
        If e.KeyChar = ChrW(Keys.Return) Then ' 如果按下的是回车键
            e.Handled = True ' 防止出现“叮咚”声
            Me.SelectNextControl(txtCyclesToFailure, True, True, True, True) ' 跳转到下一个控件（即TextBox2）
        End If
    End Sub
    Private Sub txtEnduranceLimit_KeyPress(sender As Object, e As KeyPressEventArgs) Handles txtEnduranceLimit.KeyPress
        If e.KeyChar = ChrW(Keys.Return) Then ' 如果按下的是回车键
            e.Handled = True ' 防止出现“叮咚”声
            Me.SelectNextControl(txtEnduranceLimit, True, True, True, True) ' 跳转到下一个控件（即TextBox2）
        End If
    End Sub
    Private Sub txtFatigueStrengthExponent_KeyDown(sender As Object, e As KeyEventArgs) Handles txtFatigueStrengthExponent.KeyDown
        If e.KeyCode = Keys.Enter Then
            btnCalculate.PerformClick()
        End If
    End Sub

    Private Sub btnCalculate_Click_1(sender As Object, e As EventArgs) Handles btnCalculate.Click

        ' 输入变量
        Dim stressRange As Double '= CDbl(txtStressRange.Text) ' 应力幅值，单位MPa
        If Double.TryParse(Me.txtStressRange.Text, stressRange) Then
            ' 转换成功，可以继续使用stressRange变量
        Else
            ' 转换失败，提示用户输入正确的数字格式
            MessageBox.Show("请输入正确的应力幅值")
        End If

        Dim meanStress As Double '= CDbl(txtMeanStress.Text) ' 平均应力，单位MPa
        If Double.TryParse(Me.txtMeanStress.Text, meanStress) Then
            ' 转换成功，可以继续使用stressRange变量
        Else
            ' 转换失败，提示用户输入正确的数字格式
            MessageBox.Show("请输入正确的平均应力")
        End If

        Dim cyclesToFailure As Double '= CDbl(txtCyclesToFailure.Text)' 失效循环数
        If Double.TryParse(Me.txtCyclesToFailure.Text, cyclesToFailure) Then
            ' 转换成功，可以继续使用stressRange变量
        Else
            ' 转换失败，提示用户输入正确的数字格式
            MessageBox.Show("请输入正确的失效循环数")
        End If

        ' 材料参数
        Dim enduranceLimit As Double '= CDbl(txtEnduranceLimit.Text)' 耐久极限，单位MPa
        If Double.TryParse(Me.txtEnduranceLimit.Text, enduranceLimit) Then
            ' 转换成功，可以继续使用stressRange变量
        Else
            ' 转换失败，提示用户输入正确的数字格式
            MessageBox.Show("请输入正确的耐久极限")
        End If

        Dim fatigueStrengthExponent As Double '= CDbl(txtFatigueStrengthExponent.Text) ' 疲劳强度指数
        If Double.TryParse(Me.txtFatigueStrengthExponent.Text, fatigueStrengthExponent) Then
            ' 转换成功，可以继续使用stressRange变量
        Else
            ' 转换失败，提示用户输入正确的数字格式
            MessageBox.Show("请输入正确的疲劳强度指数")
        End If

        ' 计算疲劳寿命
        Dim fatigueLife As Double
        If meanStress >= 0 Then ' 当平均应力为正时，使用Soderberg准则
            fatigueLife = (enduranceLimit / stressRange) ^ (1 / fatigueStrengthExponent) + (meanStress / stressRange)
        Else ' 当平均应力为负时，使用Goodman准则
            fatigueLife = (enduranceLimit / stressRange) ^ (1 / fatigueStrengthExponent) * (1 + Abs(meanStress) / stressRange)
        End If
        txtFatigueLife.Text = fatigueLife.ToString("#,##0.00") & "  循环"

        ' 创建位图并设置画笔
        'Dim bm As New Bitmap(PictureBox1.Width, PictureBox1.Height)
        'Dim g As Graphics = Graphics.FromImage(bm)
        Dim g As Graphics = PictureBox1.CreateGraphics()
        Dim p As New Pen(Color.Black, 2)

        ' 计算疲劳寿命曲线上的点
        Dim stressValues(100) As Double
        Dim cycleValues(100) As Double
        Dim n As Integer = 100
        For i = 0 To 99
            Dim stressRatio As Double = (i + 1) / 100
            Dim stressValue As Double = stressRange * stressRatio + meanStress
            stressValues(i) = stressValue
            Dim cycleValue As Double
            If meanStress >= 0 Then ' 当平均应力为正时，使用Soderberg准则
                cycleValue = (enduranceLimit / stressValue) ^ (1 / fatigueStrengthExponent) + (meanStress / stressValue)
            Else ' 当平均应力为负时，使用Goodman准则
                cycleValue = (enduranceLimit / stressValue) ^ (1 / fatigueStrengthExponent) * (1 + Abs(meanStress) / stressValue)
            End If
            cycleValues(i) = cycleValue
            'n = i + 1
            If cycleValue > cyclesToFailure Then Exit For ' 当疲劳寿命大于失效循环数时，停止计算
        Next
        Array.Resize(stressValues, n)
        Array.Resize(cycleValues, n)


        ' 绘制坐标轴和曲线
        g.DrawLine(p, 50, PictureBox1.Height - 50, PictureBox1.Width - 50, PictureBox1.Height - 50) ' x轴
        g.DrawLine(p, 50, PictureBox1.Height - 50, 50, 50) ' y轴
        For i = 0 To n - 1 ' 绘制曲线
            Dim x As Single = CSng((stressValues(i) - stressValues(0)) / (stressValues(n - 1) - stressValues(0)) * (PictureBox1.Width - 100) + 50)
            Dim y As Single = CSng((PictureBox1.Height - 100) - (cycleValues(i) - cycleValues(0)) / (cycleValues(n - 1) - cycleValues(0)) * (PictureBox1.Height - 100))
            g.DrawEllipse(p, x - 2, y - 2, 4, 4)
            If i > 0 Then
                g.DrawLine(p, x, y, CSng((stressValues(i - 1) - stressValues(0)) / (stressValues(n - 1) - stressValues(0)) * (PictureBox1.Width - 100) + 50), CSng((PictureBox1.Height - 100) - (cycleValues(i - 1) - cycleValues(0)) / (cycleValues(n - 1) - cycleValues(0)) * (PictureBox1.Height - 100)))
            End If
        Next

        ' 绘制疲劳寿命
        Dim x2 As Single = CSng((stressRange + meanStress - stressValues(0)) / (stressValues(n - 1) - stressValues(0)) * (PictureBox1.Width - 100) + 50)
        Dim y2 As Single = CSng((PictureBox1.Height - 100) - (cyclesToFailure - cycleValues(0)) / (cycleValues(n - 1) - cycleValues(0)) * (PictureBox1.Height - 100))
        g.DrawLine(p, x2, y2, PictureBox1.Width - 50, y2)
        g.DrawLine(p, x2, y2, x2, PictureBox1.Height - 50)
        g.DrawString("N = " & CStr(cyclesToFailure), New Font("宋体", 10), Brushes.Black, x2 + 5, y2 - 20)

    End Sub
End Class

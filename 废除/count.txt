Imports Microsoft.VisualBasic.Logging
Imports System.IO
Public Class count
    Private Sub LoginForm_FormClosing(sender As Object, e As FormClosingEventArgs) Handles MyBase.FormClosing
        ' 判断关闭原因是否为用户单击关闭按钮
        If e.CloseReason = CloseReason.UserClosing Then
            ' 如果是，退出整个应用程序
            Application.Exit()
        End If
    End Sub
End Class

Module MainModule
Sub Main()
        ' 读取输入文件
        Dim nodes, element, loads As Integer(,)
        Dim E, v As Double
        Dim success = ReadInput("input.txt", nodes, element, loads, E, v)
If Not success Then
            MessageBox.Show("Failed to read input file.")
            Return
    End If

' 初始化刚度矩阵和载荷向量
Dim K = CreateGlobalStiffnessMatrix(nodes.Length, element)
Dim F = CreateGlobalLoadVector(nodes.Length, loads)

' 处理边界条件
    ApplyBoundaryConditions(K, F)

' 解线性方程组
    Dim Ku = SolveLinearSystem(K, F)

' 输出位移结果
    Console.WriteLine("Displacement:")
For i = 0 To nodes.Length - 1
Console.WriteLine("Node {0}: u={1:F4}, v={2:F4}", i + 1, Ku(2 * i), Ku(2 * i + 1))
Next

' 计算每个单元的应力
    Dim elementArea = CalculateElementAreas(nodes, element)
Dim nElement = element.GetLength(0)
Console.WriteLine("Element stresses:")
        For i = 0 To nElement - 1
            ' 获取单元的节点编号
            Dim iNode1 = element(i, 0)
            Dim iNode2 = element(i, 1)
            Dim iNode3 = element(i, 2)
            Dim iNode4 = element(i, 3)

            ' 获取单元内部的位移向量
            Dim u = New Double(8) {}
            u(0) = Ku(2 * iNode1)
            u(1) = Ku(2 * iNode1 + 1)
            u(2) = Ku(2 * iNode2)
            u(3) = Ku(2 * iNode2 + 1)
            u(4) = Ku(2 * iNode3)
            u(5) = Ku(2 * iNode3 + 1)
            u(6) = Ku(2 * iNode4)
            u(7) = Ku(2 * iNode4 + 1)

            ' 计算单元内部的力向量
            Dim ke = CreateElementStiffnessMatrix(nodes, element, i, E, v)
            Dim f = Matrix.Multiply(ke, u)
            ' 计算单元应力
            Dim area = elementArea(i)
            Dim ex = (u(2) - u(0)) / (2 * area)
            Dim ey = (u(5) - u(1)) / (2 * area)
            Dim ez = 0
            Dim exy = (u(3) + u(4)) / (2 * area)
            Dim s = Matrix.Create(3, 3, 0)
            s(0, 0) = E / (1 - v * v) * (ex + v * ey)
            s(1, 1) = E / (1 - v * v) * (ey + v * ex)
            s(0, 1) = E / (1 + v) / 2 * exy
            s(1, 0) = s(0, 1)

            ' 输出单元应力
            Console.WriteLine("Element {0}: s11={1:F4}, s22={2:F4}, s12={3:F4}", elementIndex, s(0), s(1), s(2))
        Next
    End Sub

    Function ReadInput(ByVal filename As String, ByRef nodes As Integer(,), ByRef element As Integer(,), ByRef loads As Integer(,), ByRef E As Double, ByRef v As Double) As Boolean
        Try
            Dim reader = New StreamReader(filename)

            ' 读取节点信息
            Dim nNode = Integer.Parse(reader.ReadLine())
            nodes = New Integer(nNode - 1, 1) {}
            For i = 0 To nNode - 1
                Dim line = reader.ReadLine().Split(" "c)
                nodes(i, 0) = Integer.Parse(line(1))
                nodes(i, 1) = Integer.Parse(line(2))
            Next

            ' 读取单元信息
            Dim nElement = Integer.Parse(reader.ReadLine())
            element = New Integer(nElement - 1, 3) {}
            For i = 0 To nElement - 1
                Dim line = reader.ReadLine().Split(" "c)
                element(i, 0) = Integer.Parse(line(1)) - 1
                element(i, 1) = Integer.Parse(line(2)) - 1
                element(i, 2) = Integer.Parse(line(3)) - 1
                element(i, 3) = Integer.Parse(line(4)) - 1
            Next

            ' 读取载荷信息
            Dim nLoad = Integer.Parse(reader.ReadLine())
            loads = New Integer(nLoad - 1, 2) {}
            For i = 0 To nLoad - 1
                Dim line = reader.ReadLine().Split(" "c)
                loads(i, 0) = Integer.Parse(line(1)) - 1
                loads(i, 1) = Integer.Parse(line(2))
            Next

            ' 读取材料参数
            Dim line1 = reader.ReadLine().Split(" "c)
            E = Double.Parse(line1(0))
            v = Double.Parse(line1(1))

            reader.Close()
            Return True
        Catch ex As Exception
            Console.WriteLine(ex.ToString())
            Return False
        End Try
    End Function

    Function CreateElementStiffnessMatrix(ByVal nodes As Integer(,), ByVal element As Integer(,), ByVal iElement As Integer, ByVal E As Double, ByVal v As Double) As Double(,)
        Dim nNode = nodes.GetLength(0)
        Dim ke = Matrix.Create(8, 8, 0)
        Dim area = CalculateElementArea(nodes, element, iElement)

        ' 构造局部刚度矩阵
        Dim D = CreateD(E, v)
        For i = 0 To 3
            Dim iNode1 = element(iElement, i)
            Dim iNode2 = element(iElement, (i + 1) Mod 4)
            Dim L = CalculateElementLength(nodes, iNode1, iNode2)
            Dim k = Matrix.Create(2, 2, 0)
            k(0, 0) = E * area / L
            k(0, 1) = -E * area / L
            k(1, 0) = -E * area / L
            k(1, 1) = E * area / L
            ke(2 * iNode1, 2 * iNode1) += k(0, 0)
            ke(2 * iNode1, 2 * iNode1 + 1) += k(0, 1)
            ke(2 * iNode1 + 1, 2 * iNode1) += k(1, 0)
            ke(2 * iNode1 + 1, 2 * iNode1 + 1) += k(1, 1)
            ke(2 * iNode1, 2 * iNode2) += -k(0, 0)
            ke(2 * iNode1, 2 * iNode2 + 1) += -k(0, 1)
            ke(2 * iNode1 + 1, 2 * iNode2) += -k(1, 0)
            ke(2 * iNode1 + 1, 2 * iNode2 + 1) += -k(1, 1)
            ke(2 * iNode2, 2 * iNode1) += -k(0, 0)
            ke(2 * iNode2, 2 * iNode1 + 1) += -k(1, 0)
            ke(2 * iNode2 + 1, 2 * iNode1) += -k(0, 1)
            ke(2 * iNode2 + 1, 2 * iNode1 + 1) += -k(1, 1)
        Next
        Return ke
    End Function

    Function CreateD(ByVal E As Double, ByVal v As Double) As Double(,)
        Dim D = Matrix.Create(3, 3, 0)
        Dim factor = E / (1 - v * v)
        D(0, 0) = factor
        D(0, 1) = factor * v
        D(1, 0) = factor * v
        D(1, 1) = factor
        D(2, 2) = factor * (1 - v) / 2
        Return D
    End Function

    Function CalculateElementArea(ByVal nodes As Integer(,), ByVal element As Integer(,), ByVal iElement As Integer) As Double
        Dim nNode = nodes.GetLength(0)
        Dim x1 = nodes(element(iElement, 0), 0)
        Dim y1 = nodes(element(iElement, 0), 1)
        Dim x2 = nodes(element(iElement, 1), 0)
        Dim y2 = nodes(element(iElement, 1), 1)
        Dim x3 = nodes(element(iElement, 2), 0)
        Dim y3 = nodes(element(iElement, 2), 1)
        Dim x4 = nodes(element(iElement, 3), 0)
        Dim y4 = nodes(element(iElement, 3), 1)
        Dim area = 0.5 * ((x2 - x1) * (y4 - y3) - (x4 - x3) * (y2 - y1))
        Return Math.Abs(area)
    End Function

    Function CalculateElementLength(ByVal nodes As Integer(,), ByVal iNode1 As Integer, ByVal iNode2 As Integer) As Double
        Dim x1 = nodes(iNode1, 0)
        Dim y1 = nodes(iNode1, 1)
        Dim x2 = nodes(iNode2, 0)
        Dim y2 = nodes(iNode2, 1)
        Dim L = Math.Sqrt((x2 - x1) ^ 2 + (y2 - y1) ^ 2)
        Return L
    End Function

    Sub ApplyBoundaryConditions(ByVal K As Double(,), ByVal F As Double(), ByVal nodes As Integer(,), ByVal loads As Integer(,))
        Dim nNode = nodes.GetLength(0)
        Dim nLoad = loads.GetLength(0)
        For i = 0 To nLoad - 1
            Dim iNode = loads(i, 0)
            Dim fx = loads(i, 1)
            Dim fy = loads(i, 2)
            Dim iRow = 2 * iNode
            F(iRow) += fx
            F(iRow + 1) += fy
        Next

        For i = 0 To nNode - 1
            If nodes(i, 2) = 1 Then ' fixed boundary condition
                Dim iRow = 2 * i
                K(iRow, iRow) = 1
                K(iRow + 1, iRow + 1) = 1
                F(iRow) = 0
                F(iRow + 1) = 0
            End If
        Next
    End Sub

    Function SolveLinearEquations(ByVal K As Double(,), ByVal F As Double()) As Double()
        Dim n = F.Length
        Dim x = Matrix.Create(n, 1, 0)
        Dim A = Matrix.Create(n, n, 0)
        For i = 0 To n - 1
            For j = 0 To n - 1
                A(i, j) = K(i, j)
            Next
        Next
        Dim B = Matrix.Create(n, 1, 0)
        For i = 0 To n - 1
            B(i, 0) = F(i)
        Next
        Dim L = Matrix.LU(A)
        Dim y = Matrix.LowerSolve(L, B)
        Dim u = Matrix.UpperSolve(L, y)
        For i = 0 To n - 1
            x(i, 0) = u(i, 0)
        Next
        Return x.ToArray()
    End Function

    Function CalculateElementStresses(ByVal nodes As Integer(,), ByVal element As Integer(,), ByVal iElement As Integer, ByVal U As Double()) As Double()
        Dim nNode = nodes.GetLength(0)
        Dim nDof = 2 * nNode
        Dim stress = Matrix.Create(3, 1, 0)
        Dim E = 210000000000.0
        Dim v = 0.3
        Dim D = CreateD(E, v)
        Dim iNode1 = element(iElement, 0)
        Dim iNode2 = element(iElement, 1)
        Dim iNode3 = element(iElement, 2)
        Dim iNode4 = element(iElement, 3)
        Dim x1 = nodes(iNode1, 0)
        Dim y1 = nodes(iNode1, 1)
        Dim x2 = nodes(iNode2, 0)
        Dim y2 = nodes(iNode2, 1)
        Dim x3 = nodes(iNode3, 0)
        Dim y3 = nodes(iNode3, 1)
        Dim x4 = nodes(iNode4, 0)
        Dim y4 = nodes(iNode4, 1)
        Dim xi = 0
        Dim eta = 0
        Dim nGp = 2
        Dim wGp = 1
        Dim gp = {{-1 / Math.Sqrt(3), -1 / Math.Sqrt(3)}, {1 / Math.Sqrt(3), -1 / Math.Sqrt(3)}, {1 / Math.Sqrt(3), 1 / Math.Sqrt(3)}, {-1 / Math.Sqrt(3), 1 / Math.Sqrt(3)}}
        For i = 0 To nGp - 1
            xi = gp(i, 0)
            eta = gp(i, 1)
            Dim B = CreateB(xi, eta, nodes, element, iElement)
            Dim u = Matrix.Create(nDof, 1, 0)
            For j = 0 To 7
                Dim iNode = element(iElement, j Mod 4)
                Dim iDof = 2 * iNode
                If j < 4 Then
                    u(iDof, 0) = u(iDof)
                    u(iDof + 1, 0) = u(iDof + 1)
                Else
                    u(iDof, 0) = 0
                    u(iDof + 1, 0) = 0
                End If
            Next
            Dim strain = Matrix.Multiply(B, u)
            stress = Matrix.Add(stress, Matrix.Multiply(D, strain))
        Next
        Return stress.ToArray()
    End Function

    Function CreateD(ByVal E As Double, ByVal v As Double) As Double(,)
        Dim D = Matrix.Create(3, 3, 0)
        Dim c1 = E / (1 - v * v)
        Dim c2 = c1 * v
        Dim c3 = c1 * (1 - v) / 2
        D(0, 0) = c1
        D(0, 1) = c2
        D(1, 0) = c2
        D(1, 1) = c1
        D(2, 2) = c3
        Return D.ToArray()
    End Function

    Function CreateB(ByVal xi As Double, ByVal eta As Double, ByVal nodes As Integer(,), ByVal element As Integer(,), ByVal iElement As Integer) As Double(,)
        Dim nNode = nodes.GetLength(0)
        Dim B = Matrix.Create(3, 8, 0)
        Dim x1 = nodes(element(iElement, 0), 0)
        Dim y1 = nodes(element(iElement, 0), 1)
        Dim x2 = nodes(element(iElement, 1), 0)
        Dim y2 = nodes(element(iElement, 1), 1)
        Dim x3 = nodes(element(iElement, 2), 0)
        Dim y3 = nodes(element(iElement, 2), 1)
        Dim x4 = nodes(element(iElement, 3), 0)
        Dim y4 = nodes(element(iElement, 3), 1)
        Dim dNdxi = Matrix.Create(4, 1, 0)
        Dim dNdeta = Matrix.Create(4, 1, 0)
        dNdxi(0, 0) = -(1 - eta) / 4
        dNdxi(1, 0) = (1 - eta) / 4
        dNdxi(2, 0) = (1 + eta) / 4
        dNdxi(3, 0) = -(1 + eta) / 4
        dNdeta(0, 0) = -(1 - xi) / 4
        dNdeta(1, 0) = -(1 + xi) / 4
        dNdeta(2, 0) = (1 + xi) / 4
        dNdeta(3, 0) = (1 - xi) / 4
        Dim J = Matrix.Create(2, 2, 0)
        J(0, 0) = Matrix.Multiply(dNdxi.Transpose(), Matrix.Create(4, 2, {{x(0, 0), x(0, 1)}, {x(1, 0), x(1, 1)}, {x(2, 0), x(2, 1)}, {x(3, 0), x(3, 1)}}))(0, 0)
        J(0, 1) = Matrix.Multiply(dNdxi.Transpose(), Matrix.Create(4, 2, {{y(0, 0), y(0, 1)}, {y(1, 0), y(1, 1)}, {y(2, 0), y(2, 1)}, {y(3, 0), y(3, 1)}}))(0, 0)
        J(1, 0) = Matrix.Multiply(dNdeta.Transpose(), Matrix.Create(4, 2, {{x(0, 0), x(0, 1)}, {x(1, 0), x(1, 1)}, {x(2, 0), x(2, 1)}, {x(3, 0), x(3, 1)}}))(0, 0)
        J(1, 1) = Matrix.Multiply(dNdeta.Transpose(), Matrix.Create(4, 2, {{y(0, 0), y(0, 1)}, {y(1, 0), y(1, 1)}, {y(2, 0), y(2, 1)}, {y(3, 0), y(3, 1)}}))(0, 0)
        ' 计算应力、应变及应力分量
        Dim stress = Matrix.Create(3, 1, 0)
        For i = 0 To nGp - 1
            Dim xi = gp(i, 0)
            Dim eta = gp(i, 1)
            Dim B = CreateB(xi, eta, nodes, element, iElement)
            Dim u = Matrix.Create(nDof, 1, 0)
            For J = 0 To 7
                Dim iNode = element(iElement, J Mod 4)
                Dim iDof = 2 * iNode
                If J < 4 Then
                    u(iDof, 0) = u(iDof)
                    u(iDof + 1, 0) = u(iDof + 1)
                Else
                    u(iDof, 0) = 0
                    u(iDof + 1, 0) = 0
                End If
            Next
            Dim strain = Matrix.Multiply(B, u)
            stress = Matrix.Add(stress, Matrix.Multiply(D, strain))
        Next
        Return stress.ToArray()
    End Function

    Function CreateD(ByVal E As Double, ByVal v As Double) As Double(,)
        Dim D = Matrix.Create(3, 3, 0)
        Dim c1 = E / (1 - v * v)
        Dim c2 = c1 * v
        Dim c3 = c1 * (1 - v) / 2
        D(0, 0) = c1
        D(0, 1) = c2
        D(1, 0) = c2
        D(1, 1) = c1
        D(2, 2) = c3
        Return D.ToArray()
    End Function

    Function CreateB(ByVal xi As Double, ByVal eta As Double, ByVal nodes As Integer(,), ByVal element As Integer(,), ByVal iElement As Integer) As Double(,)
        Dim nNode = nodes.GetLength(0)
        Dim B = Matrix.Create(3, 8, 0)
        Dim x1 = nodes(element(iElement, 0), 0)
        Dim y1 = nodes(element(iElement, 0), 1)
        Dim x2 = nodes(element(iElement, 1), 0)
        Dim y2 = nodes(element(iElement, 1), 1)
        Dim x3 = nodes(element(iElement, 2), 0)
        Dim y3 = nodes(element(iElement, 2), 1)
        Dim x4 = nodes(element(iElement, 3), 0)
        Dim y4 = nodes(element(iElement, 3), 1)
        Dim dNdxi = Matrix.Create(4, 1, 0)
        Dim dNdeta = Matrix.Create(4, 1, 0)
        dNdxi(0, 0) = -(1 - eta) / 4
        dNdxi(1, 0) = (1 - eta) / 4
        dNdxi(2, 0) = (1 + eta) / 4
        dNdxi(3, 0) = -(1 + eta) / 4
        dNdeta(0, 0) = -(1 - xi) / 4
        dNdeta(1, 0) = -(1 + xi) / 4
        dNdeta(2, 0) = (1 + xi) / 4
        dNdeta(3, 0) = (1 - xi) / 4
        Dim jacobian = Matrix.Create(2, 2, 0)
        jacobian(0, 0) = (x2 - x1) * dNdxi(0, 0) + (x3 - x4) * dNdxi(1, 0)
        jacobian(0, 1) = (y2 - y1) * dNdxi(0, 0) + (y3 - y4) * dNdxi(1, 0)
        jacobian(1, 0) = (x3 - x2) * dNdeta(0, 0) + (x4 - x1) * dNdeta(1, 0)
        jacobian(1, 1) = (y3 - y2) * dNdeta(0, 0) + (y4 - y1) * dNdeta(1, 0)
        Dim detJ = jacobian(0, 0) * jacobian(1, 1) - jacobian(0, 1) * jacobian(1, 0)
        Dim invJ = Matrix.Create(2, 2, 0)
        invJ(0, 0) = jacobian(1, 1) / detJ
        invJ(0, 1) = -jacobian(0, 1) / detJ
        invJ(1, 0) = -jacobian(1, 0) / detJ
        invJ(1, 1) = jacobian(0, 0) / detJ
        Dim dNdxy = Matrix.Multiply(invJ, Matrix.Combine(dNdxi, dNdeta))
        For i = 0 To 3
            Dim iDof = 2 * element(iElement, i)
            B(0, 2 * i) = dNdxy(0, i)
            B(1, 2 * i + 1) = dNdxy(1, i)
            B(2, 2 * i) = dNdxy(1, i)
            B(2, 2 * i + 1) = dNdxy(0, i)
        Next
        Return B.ToArray()
    End Function
    Function CreateK(ByVal D As Double(,), ByVal B As Double(,), ByVal element As Integer(,), ByVal nodes As Integer(,), ByVal iElement As Integer) As Double(,)
        Dim k = Matrix.Create(8, 8, 0)
        Dim thickness = 0.01
        Dim area = 0.5 * ((nodes(element(iElement, 0), 0) - nodes(element(iElement, 2), 0)) * (nodes(element(iElement, 1), 1) - nodes(element(iElement, 3), 1)) - (nodes(element(iElement, 1), 0) - nodes(element(iElement, 3), 0)) * (nodes(element(iElement, 0), 1) - nodes(element(iElement, 2), 1)))
        Dim Kt = Matrix.Create(3, 3, 0)
        Kt(0, 0) = 1
        Kt(1, 1) = 1
        Kt(2, 2) = 0.5
        Kt = Matrix.Multiply(Kt, D)
        Kt = Matrix.Multiply(Kt, thickness * area)
        For i = 0 To 7
            For j = 0 To 7
                k(i, j) = k(i, j) + B(0, i) * Kt(0, 0) * B(0, j) + B(1, i) * Kt(1, 1) * B(1, j) + (B(2, i) + B(3, i)) * Kt(0, 1) * (B(2, j) + B(3, j)) + B(4, i) * Kt(2, 2) * B(4, j) + (B(2, i) + B(3, i)) * Kt(0, 1) * (B(4, j) + B(5, j)) + B(4, i) * Kt(1, 1) * B(5, j) + B(5, i) * Kt(2, 2) * B(3, j) + (B(4, i) + B(5, i)) * Kt(1, 1) * (B(2, j) + B(3, j)) + B(5, i) * Kt(0, 1) * B(4, j)
            Next
        Next
        Return k
    End Function
    Function CreateD(ByVal E As Double, ByVal nu As Double) As Double(,)
        Dim D = Matrix.Create(3, 3, 0)
        Dim factor = E / ((1 + nu) * (1 - 2 * nu))
        D(0, 0) = factor * (1 - nu)
        D(1, 1) = factor * (1 - nu)
        D(2, 2) = factor * (1 - 2 * nu) / 2
        D(0, 1) = factor * nu
        D(1, 0) = factor * nu
        Return D.ToArray()
    End Function
End Module

Module Module1
    Sub Main()
        Dim fem = New FEM
        fem.ReadFile("input.txt")
        fem.Solve()
        fem.WriteFile("output.txt")
    End Sub
End Module